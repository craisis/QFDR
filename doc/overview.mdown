# Server-side
## Logging
node.js
### Contact Storage
- Flat file
- contest configuration in json

### RESTful (json?)
- faye

## SDR
- DttSP
- USB-softrock
- jack

## Program flow (Server JS)
### Logbook list request
- Return list of logbooks 

### Logbook request
- Return logbook+contest

### Transaction submission via faye sub URL
- Save submission to a local log file
- publish submission via faye pub URL

### Overview
- Start node.js server
	- contests
		- bind to URL for index
		- bind to URL for show
	- logbook
		- bind to URL for index
		- bind to URL for show
		- bind to URL for add
		- bind to URL for edit
		- bind to URL for destroy
- Start socket.io
	- bind to connect/disconnect/etc. actions
		- Connect 
			- register client in reservation hash
			- Register message action
				- transaction
					- validate (not in initial release, performed on client)
					- log and broadcast to other's of that logbook
					
				- reservation
					- request
					    - check if avail.
					    	- yes
					    		- respond allowed
					    		- unlock existing reservation
					    		- record as "hard-lock"
					    		- broadcast
					    	- no
								- respond denied
					- release
						- unlock reservation
			- Register client disconnect
				- move client's reservation to "soft-lock"
				

# Client-side
## Logging
### DB-cache
- Hash in JS

### hamlib
## SDR
- SDR Shell (temp)
- jack

### UDP


## UI
- webkit+gtk
	- extjs
	
	
	
## Program flow (Client JS)
- Open Client (either via web browser or program)
	- Client requests from server list of logbooks from server, pick one or specify new
	- Client requests from server the existing logbook (assuming opening an already existing logbook)
		- Client reads in logbook and associated contest's json config files (supplied by server as part of logbook data (single json response?))
		- Client populates contacts and operators hashes (transaction hash? Save local file copy?)
	- Client show logging window 
		- local
			- Operator (Auto-Complete text input on Name or Callsign, new entry causes a "new operator" popup?)
			- Logger (See note on Operator)
		- radio (some data will auto-populate and lock if using client program with hamlib, other behavior with SDR?)
			- Band
			- Mode
		- exchange
			- Read from exchange-fields in contest config, generating the needed fields and filling in the appropriate auto-complete and auto-fill as well as regex options.
		- log of past contacts, live updated?
	- Client submits data via faye sub URL to server and adds to contacts hash.
		- If connection to server is unavailable queue submissions until contact is reestablished
		
	- On interrupt client will read from faye pub URL, validate new transaction is not a conflict, and enter into transaction hash
		- If transaction is a conflict but the origin-ID matches us, discard.
		
	- On change of any fields in require-unique contest config verify that no other station has that reservation and submit a reservation publication via faye.
	
	
# Change from faye to socket.io
Using socket.io instead of faye allows for server to keep track of client reservations when client apps close, allowing for more reliable reservations.

This means reservations would not be a json transaction, but instead a separate communication.

- On client exit, client should release it's reservation (change to unlock).
- If client hard exits (kill -9) server changes reservation to a soft-lock
- on client reservation, a hard-lock is acquired.
